ARM GAS  /tmp/cc96WIXN.s 			page 1


   1              	# 1 "../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s"
   1              	/*
   1              	...
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v7m.s
  19              	 * @brief   Generic ARMv7-M (Cortex-M3/M4/M7) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V7M
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	#define CONTROL_FPCA                        4
  42              	
  43              	#define FPCCR_ASPEN                         (1 << 31)
  44              	#define FPCCR_LSPEN                         (1 << 30)
  45              	
  46              	#define SCB_CPACR                           0xE000ED88
  47              	#define SCB_FPCCR                           0xE000EF34
  48              	#define SCB_FPDSCR                          0xE000EF3C
  49              	
  50              	/*===========================================================================*/
  51              	/* Module pre-compile time settings.                                         */
  52              	/*===========================================================================*/
  53              	
ARM GAS  /tmp/cc96WIXN.s 			page 2


  54              	/**
  55              	 * @brief   FPU initialization switch.
  56              	 */
  57              	#if !defined(CRT0_INIT_FPU) || defined(__DOXYGEN__)
  58              	#if defined(CORTEX_USE_FPU) || defined(__DOXYGEN__)
  59              	#define CRT0_INIT_FPU                       CORTEX_USE_FPU
  60              	#else
  61              	#define CRT0_INIT_FPU                       FALSE
  62              	#endif
  63              	#endif
  64              	
  65              	/**
  66              	 * @brief   Control special register initialization value.
  67              	 * @details The system is setup to run in privileged mode using the PSP
  68              	 *          stack (dual stack mode).
  69              	 */
  70              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  71              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  72              	                                             CONTROL_MODE_PRIVILEGED)
  73              	#endif
  74              	
  75              	/**
  76              	 * @brief   Core initialization switch.
  77              	 */
  78              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  79              	#define CRT0_INIT_CORE                      TRUE
  80              	#endif
  81              	
  82              	/**
  83              	 * @brief   Stack segments initialization switch.
  84              	 */
  85              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
  86              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
  87              	#endif
  88              	
  89              	/**
  90              	 * @brief   Stack segments initialization switch.
  91              	 */
  92              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
  93              	#define CRT0_INIT_STACKS                    TRUE
  94              	#endif
  95              	
  96              	/**
  97              	 * @brief   DATA segment initialization switch.
  98              	 */
  99              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 100              	#define CRT0_INIT_DATA                      TRUE
 101              	#endif
 102              	
 103              	/**
 104              	 * @brief   BSS segment initialization switch.
 105              	 */
 106              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 107              	#define CRT0_INIT_BSS                       TRUE
 108              	#endif
 109              	
 110              	/**
ARM GAS  /tmp/cc96WIXN.s 			page 3


 111              	 * @brief   RAM areas initialization switch.
 112              	 */
 113              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 114              	#define CRT0_INIT_RAM_AREAS                 TRUE
 115              	#endif
 116              	
 117              	/**
 118              	 * @brief   Constructors invocation switch.
 119              	 */
 120              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 121              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 122              	#endif
 123              	
 124              	/**
 125              	 * @brief   Destructors invocation switch.
 126              	 */
 127              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 128              	#define CRT0_CALL_DESTRUCTORS               TRUE
 129              	#endif
 130              	
 131              	/**
 132              	 * @brief   FPU FPCCR register initialization value.
 133              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 134              	 */
 135              	#if !defined(CRT0_FPCCR_INIT) || defined(__DOXYGEN__)
 136              	#define CRT0_FPCCR_INIT                     (FPCCR_ASPEN | FPCCR_LSPEN)
 137              	#endif
 138              	
 139              	/**
 140              	 * @brief   CPACR register initialization value.
 141              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 142              	 */
 143              	#if !defined(CRT0_CPACR_INIT) || defined(__DOXYGEN__)
 144              	#define CRT0_CPACR_INIT                     0x00F00000
 145              	#endif
 146              	
 147              	/*===========================================================================*/
 148              	/* Code section.                                                             */
 149              	/*===========================================================================*/
 150              	
 151              	#if !defined(__DOXYGEN__)
 152              	
 153              	                .syntax unified
 154              	                .cpu    cortex-m3
 155              	#if CRT0_INIT_FPU == TRUE
 156              	                .fpu    fpv4-sp-d16
 157              	#else
 158              	                .fpu    softvfp
 159              	#endif
 160              	
 161              	                .thumb
 162              	                .text
 163              	
 164              	/*
 165              	 * Reset handler.
 166              	 */
 167              	                .align  2
ARM GAS  /tmp/cc96WIXN.s 			page 4


 168              	                .thumb_func
 169              	                .global Reset_Handler
 170              	Reset_Handler:
 171              	                /* Interrupts are globally masked initially.*/
 172 0000 72B6     	                cpsid   i
 173              	
 174              	                /* PSP stack pointers initialization.*/
 175 0002 3448     	                ldr     r0, =__process_stack_end__
 176 0004 80F30988 	                msr     PSP, r0
 177              	
 178              	#if CRT0_INIT_FPU == TRUE
 179              	                /* FPU FPCCR initialization.*/
 180 0008 40F20000 	                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 181 000c CCF20000 	                movt    r0, #CRT0_FPCCR_INIT >> 16
 182 0010 4EF63471 	                movw    r1, #SCB_FPCCR & 0xFFFF
 183 0014 CEF20001 	                movt    r1, #SCB_FPCCR >> 16
 184 0018 0860     	                str     r0, [r1]
 185 001a BFF34F8F 	                dsb
 186 001e BFF36F8F 	                isb
 187              	
 188              	                /* CPACR initialization.*/
 189 0022 40F20000 	                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 190 0026 C0F2F000 	                movt    r0, #CRT0_CPACR_INIT >> 16
 191 002a 4EF68851 	                movw    r1, #SCB_CPACR & 0xFFFF
 192 002e CEF20001 	                movt    r1, #SCB_CPACR >> 16
 193 0032 0860     	                str     r0, [r1]
 194 0034 BFF34F8F 	                dsb
 195 0038 BFF36F8F 	                isb
 196              	
 197              	                /* FPU FPSCR initially cleared.*/
 198 003c 4FF00000 	                mov     r0, #0
 199 0040 E1EE100A 	                vmsr    FPSCR, r0
 200              	
 201              	                /* FPU FPDSCR initially cleared.*/
 202 0044 4EF63C71 	                movw    r1, #SCB_FPDSCR & 0xFFFF
 203 0048 CEF20001 	                movt    r1, #SCB_FPDSCR >> 16
 204 004c 0860     	                str     r0, [r1]
 205              	
 206              	                /* Enforcing FPCA bit in the CONTROL register.*/
 207 004e 0620     	                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 208              	
 209              	#else
 210              	                movs    r0, #CRT0_CONTROL_INIT
 211              	#endif
 212              	
 213              	                /* CONTROL register initialization as configured.*/
 214 0050 80F31488 	                msr     CONTROL, r0
 215 0054 BFF36F8F 	                isb
 216              	
 217              	#if CRT0_INIT_CORE == TRUE
 218              	                /* Core initialization.*/
 219 0058 FFF7FEFF 	                bl      __core_init
 220              	#endif
 221              	
 222              	                /* Early initialization.*/
 223 005c FFF7FEFF 	                bl      __early_init
 224              	
ARM GAS  /tmp/cc96WIXN.s 			page 5


 225              	#if CRT0_INIT_STACKS == TRUE
 226 0060 4FF05530 	                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 227              	                /* Main Stack initialization. Note, it assumes that the
 228              	                   stack size is a multiple of 4 so the linker file must
 229              	                   ensure this.*/
 230 0064 1C49     	                ldr     r1, =__main_stack_base__
 231 0066 1D4A     	                ldr     r2, =__main_stack_end__
 232              	msloop:
 233 0068 9142     	                cmp     r1, r2
 234 006a 3CBF     	                itt     lo
 235 006c 41F8040B 	                strlo   r0, [r1], #4
 236 0070 FAE7     	                blo     msloop
 237              	
 238              	                /* Process Stack initialization. Note, it assumes that the
 239              	                   stack size is a multiple of 4 so the linker file must
 240              	                   ensure this.*/
 241 0072 1B49     	                ldr     r1, =__process_stack_base__
 242 0074 174A     	                ldr     r2, =__process_stack_end__
 243              	psloop:
 244 0076 9142     	                cmp     r1, r2
 245 0078 3CBF     	                itt     lo
 246 007a 41F8040B 	                strlo   r0, [r1], #4
 247 007e FAE7     	                blo     psloop
 248              	#endif
 249              	
 250              	#if CRT0_INIT_DATA == TRUE
 251              	                /* Data initialization. Note, it assumes that the DATA size
 252              	                  is a multiple of 4 so the linker file must ensure this.*/
 253 0080 1849     	                ldr     r1, =_textdata_start
 254 0082 194A     	                ldr     r2, =_data_start
 255 0084 194B     	                ldr     r3, =_data_end
 256              	dloop:
 257 0086 9A42     	                cmp     r2, r3
 258 0088 3EBF     	                ittt    lo
 259 008a 51F8040B 	                ldrlo   r0, [r1], #4
 260 008e 42F8040B 	                strlo   r0, [r2], #4
 261 0092 F8E7     	                blo     dloop
 262              	#endif
 263              	
 264              	#if CRT0_INIT_BSS == TRUE
 265              	                /* BSS initialization. Note, it assumes that the DATA size
 266              	                  is a multiple of 4 so the linker file must ensure this.*/
 267 0094 0020     	                movs    r0, #0
 268 0096 1649     	                ldr     r1, =_bss_start
 269 0098 164A     	                ldr     r2, =_bss_end
 270              	bloop:
 271 009a 9142     	                cmp     r1, r2
 272 009c 3CBF     	                itt     lo
 273 009e 41F8040B 	                strlo   r0, [r1], #4
 274 00a2 FAE7     	                blo     bloop
 275              	#endif
 276              	
 277              	#if CRT0_INIT_RAM_AREAS == TRUE
 278              	                /* RAM areas initialization.*/
 279 00a4 FFF7FEFF 	                bl      __init_ram_areas
 280              	#endif
 281              	
ARM GAS  /tmp/cc96WIXN.s 			page 6


 282              	                /* Late initialization..*/
 283 00a8 FFF7FEFF 	                bl      __late_init
 284              	
 285              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 286              	                /* Constructors invocation.*/
 287 00ac 124C     	                ldr     r4, =__init_array_start
 288 00ae 134D     	                ldr     r5, =__init_array_end
 289              	initloop:
 290 00b0 AC42     	                cmp     r4, r5
 291 00b2 03DA     	                bge     endinitloop
 292 00b4 54F8041B 	                ldr     r1, [r4], #4
 293 00b8 8847     	                blx     r1
 294 00ba F9E7     	                b       initloop
 295              	endinitloop:
 296              	#endif
 297              	
 298              	                /* Main program invocation, r0 contains the returned value.*/
 299 00bc FFF7FEFF 	                bl      main
 300              	
 301              	#if CRT0_CALL_DESTRUCTORS == TRUE
 302              	                /* Destructors invocation.*/
 303 00c0 0F4C     	                ldr     r4, =__fini_array_start
 304 00c2 104D     	                ldr     r5, =__fini_array_end
 305              	finiloop:
 306 00c4 AC42     	                cmp     r4, r5
 307 00c6 03DA     	                bge     endfiniloop
 308 00c8 54F8041B 	                ldr     r1, [r4], #4
 309 00cc 8847     	                blx     r1
 310 00ce F9E7     	                b       finiloop
 311              	endfiniloop:
 312              	#endif
 313              	
 314              	                /* Branching to the defined exit handler.*/
 315 00d0 FFF7FEBF 	                b       __default_exit
 315      00000000 
 315      00000000 
 315      00000000 
 315      00000000 
ARM GAS  /tmp/cc96WIXN.s 			page 7


DEFINED SYMBOLS
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:167    .text:0000000000000000 $t
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:170    .text:0000000000000000 Reset_Handler
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:232    .text:0000000000000068 msloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:243    .text:0000000000000076 psloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:256    .text:0000000000000086 dloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:270    .text:000000000000009a bloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:289    .text:00000000000000b0 initloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:295    .text:00000000000000bc endinitloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:305    .text:00000000000000c4 finiloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:311    .text:00000000000000d0 endfiniloop
../ChibiOS/os/common/ports/ARMCMx/compilers/GCC/crt0_v7m.s:315    .text:00000000000000d4 $d

UNDEFINED SYMBOLS
__process_stack_end__
__core_init
__early_init
__main_stack_base__
__main_stack_end__
__process_stack_base__
_textdata_start
_data_start
_data_end
_bss_start
_bss_end
__init_ram_areas
__late_init
__init_array_start
__init_array_end
main
__fini_array_start
__fini_array_end
__default_exit
